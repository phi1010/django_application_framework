"""
Django settings for myproject project.

Generated by 'django-admin startproject' using Django 3.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
import ipaddress
import json
import logging
import logging.config
import os
import pickle
import socket
from pathlib import Path

from celery.schedules import crontab

import myproject.tasks

# TODO this file becomes too long, use dynaconf or similar and split it up.

from django.core.management.utils import get_random_secret_key
from icecream import ic

from .atomic_globals import AtomicGlobals

# This tool allows to either declare all or no settings at all for a specific feature.
atomic_globals = AtomicGlobals()

# ================================================================
# Logging
# ================================================================
# optionally install `rich` for colored logging

log = logging.getLogger(__name__)

try:
    from rich.logging import RichHandler
except:
    RichHandler = None

_DJANGO_LOGGING = os.getenv("DJANGO_LOGGING")
LOGGING = json.loads(_DJANGO_LOGGING) if _DJANGO_LOGGING else {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(name)s %(process)d %(thread)d %(message)s',
        },
        'simple': {
            'format': '%(message)s',
        },
        'complex': {
            'format': '%(processName)s#%(process)d @ %(module)s:%(name)s:%(funcName)s: %(message)s',
        },
    },

    'handlers': {
        'metrics': {
            'class':'myproject.logging.MetricLoggingHandler',
        },
        'console': {
            'class': 'rich.logging.RichHandler' if RichHandler else 'logging.StreamHandler',
            'formatter': 'simple' if RichHandler else 'verbose'
        },
    },
    'root': {
        'handlers': ['console', 'metrics'],
        'level': 'DEBUG',
    },
    'loggers': {
        'django': {
            #'handlers': ['console'],
            'level': 'INFO',
        },
        'django.db.backends': {
            'level': 'DEBUG',
            #'handlers': ['console'],
        },
        'some.logger': {
            #'handlers': ['console'],
            'level': 'INFO',
            #'propagate': False,
        },
    },
}
logging.config.dictConfig(LOGGING)

# ================================================================

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# ================================================================
# Django Security Settings
# ================================================================

DEBUG = bool(os.getenv('ACTIVATE_DEBUG_MODE'))

# this allows to use {% if debug %} in django templates.
INTERNAL_IPS = ['127.0.0.1', '::1']

SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

SECRET_KEY = os.getenv("DJANGO_SECRET", "")
if not SECRET_KEY:
    log.error("Secret key not set")

# https://github.com/jazzband/django-fernet-encrypted-fields
SALT_KEY = os.getenv("DJANGO_SALT")

ALLOWED_HOSTS = json.loads(os.environ.get("ALLOWED_HOSTS", "[]")) or ['localhost', '127.0.0.1', '[::1]', 'python']

# ================================================================
# Framework applications
# ================================================================
# Our own apps are declared at the bottom of this file.


INSTALLED_APPS = [
    'django.contrib.admin',  # https://docs.djangoproject.com/en/3.2/ref/contrib/admin/
    'django.contrib.auth',  # https://docs.djangoproject.com/en/3.2/ref/contrib/auth/
    'django.contrib.contenttypes',  # https://docs.djangoproject.com/en/3.2/ref/contrib/contenttypes/
    'django.contrib.sessions',  # https://docs.djangoproject.com/en/3.2/topics/http/sessions/
    'django.contrib.messages',  # https://docs.djangoproject.com/en/3.2/ref/contrib/messages/
    'django.contrib.staticfiles',  # https://docs.djangoproject.com/en/3.2/ref/contrib/staticfiles/
]

MIDDLEWARE = [
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
]

SILENCED_SYSTEM_CHECKS = [
    "security.W008",  # SECURE_SSL_REDIRECT -> responsibility of nginx.
    "security.W004",  # SECURE_HSTS_SECONDS -> responsibility of nginx.
]
SESSION_COOKIE_SECURE = False if DEBUG else True
CSRF_COOKIE_SECURE = False if DEBUG else True

if DEBUG:
    INSTALLED_APPS += [
        'django_extensions',
        # 'debug_toolbar',
    ]
    MIDDLEWARE += [
        # 'debug_toolbar.middleware.DebugToolbarMiddleware',
    ]

# ================================================================
# URLs
# ================================================================

ROOT_URLCONF = 'myproject.urls'

LOGIN_REDIRECT_URL = "/"
LOGOUT_REDIRECT_URL = "/"

# ================================================================
# Jinja and Django Template Renderers and Paths
# ================================================================

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.jinja2.Jinja2',
        'DIRS': ["jinja-templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'environment': 'web_homepage.jinja.environment'
        },
    },
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ["templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# ================================================================
# Webserver
# ================================================================

WSGI_APPLICATION = 'myproject.wsgi.application'

# ================================================================
# Authz Microservice
# ================================================================

OPA_BEARER_TOKEN = os.getenv("OPA_BEARER_TOKEN") or ""
OPA_URL = os.getenv("OPA_URL")
OPA_BUNDLE_DIRECTORY = os.getenv("OPA_BUNDLE_DIRECTORY") or ""

# ================================================================
# Database
# ================================================================


# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

POSTGRES_DB = os.getenv("POSTGRES_DB")
if not POSTGRES_DB:
    if DEBUG:
        log.warning("Using sqlite database")
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': BASE_DIR / 'data' / 'db.sqlite3',
            }
        }
else:
    POSTGRES_PASSWORD = os.getenv("POSTGRES_PASSWORD")
    POSTGRES_USER = os.getenv("POSTGRES_USER")
    POSTGRES_HOST = os.getenv("POSTGRES_HOST")
    log.info(f"Using Postgres DB {POSTGRES_DB!r} on Host {POSTGRES_HOST!r}")
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'NAME': POSTGRES_DB,
            'USER': POSTGRES_USER,
            'PASSWORD': POSTGRES_PASSWORD,
            'HOST': POSTGRES_HOST,
        }
    }

# ================================================================

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# ================================================================

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'
# STATICFILES_DIRS = ["static"]
STATIC_ROOT = os.getenv("COLLECTSTATIC_DIR", None)

# ================================================================
# Authentication and OpenID Connect Configuration
# ================================================================

AUTH_USER_MODEL = "accounts.User"

# Add 'mozilla_django_oidc' authentication backend
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
]

# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        # TODO we should use a german list for our target group, however, these are difficult to find.
        #  Use Duden, given names, surnames, sports clubs and qwertz-Keywalks?
        # https://docs.djangoproject.com/en/3.1/topics/auth/passwords/#password-validation
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
        # 'password_list_path' : '...'
        # This file should contain one lowercase password per line and may be plain text or gzipped.
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

with atomic_globals:
    # ic(dict(os.environ))
    OIDC_RP_CLIENT_ID = os.environ['OIDC_RP_CLIENT_ID']
    OIDC_OP_JWKS_ENDPOINT = os.environ['OIDC_OP_JWKS_ENDPOINT']
    OIDC_RP_CLIENT_SECRET = os.environ['OIDC_RP_CLIENT_SECRET']
    OIDC_RENEW_ID_TOKEN_EXPIRY_SECONDS = 60 * 15
    OIDC_OP_AUTHORIZATION_ENDPOINT = os.environ['OIDC_OP_AUTHORIZATION_ENDPOINT']
    OIDC_OP_TOKEN_ENDPOINT = os.environ['OIDC_OP_TOKEN_ENDPOINT']
    OIDC_OP_USER_ENDPOINT = os.environ['OIDC_OP_USER_ENDPOINT']
    OIDC_OP_LOGOUT_URL = os.environ['OIDC_OP_LOGOUT_URL']
    if OIDC_OP_LOGOUT_URL:
        OIDC_OP_LOGOUT_URL_METHOD = 'accounts.auth.provider_logout'
    OIDC_RP_SIGN_ALGO = os.environ['OIDC_RP_SIGN_ALGO']  # "RS256"
if atomic_globals:
    OIDC = True
    INSTALLED_APPS += [
        'mozilla_django_oidc',  # Load after auth
    ]
    AUTHENTICATION_BACKENDS += [
        #    'mozilla_django_oidc.auth.OIDCAuthenticationBackend',
        'accounts.auth.CustomOidcAuthenticationBackend',
    ]
    MIDDLEWARE += [
        # this might make API requests a bit more difficult
        'mozilla_django_oidc.middleware.SessionRefresh',
    ]
    log.info("Successfully loaded OpenID Connect configuration")
else:
    OIDC = False
    log.warning("Did not load OpenID Connect configuration", exc_info=atomic_globals.exc_info)

# ================================================================
# GraphQL
# ================================================================

INSTALLED_APPS += [
    # 'django.contrib.staticfiles', # Required for GraphiQL
    'graphene_django',
]

# Check http://127.0.0.1:8000/graphql
# You could query:
"""{
  users {
    id
    fullName
    displayName
    username
    isSuperuser
    dateJoined
  }
  _debug{
    sql {
      sql
      transId
      transStatus
      isoLevel
      encoding
      vendor
      duration
      startTime
      stopTime
      isSlow
      isSelect
    }
  }
}
"""

GRAPHENE = {
    'SCHEMA': 'api.gql.schema',  # Where your Graphene schema lives
    'MIDDLEWARE': [
        'graphene_django.debug.DjangoDebugMiddleware',
        # this hides exception messages, except for explicit graphql exceptions:
        'api.gql.SecurityMiddleware',
    ] if DEBUG else [],
}

# ================================================================
# Celery
# ================================================================
CELERY_BROKER_URL = "redis://redis:6379"
CELERY_RESULT_BACKEND = "redis://redis:6379"

CELERY_BEAT_SCHEDULE = {
    "debug_task": {
        "task": "myproject.tasks.debug_task",
        "schedule": crontab(minute="*/1"),
    },
    "some_task": {
        "task": "myapp.tasks.some_task",
        "schedule": crontab(minute="*/15"),
    },
} if DEBUG else {}

# ================================================================
# Metrics
# ================================================================

INSTALLED_APPS += [
    'django_prometheus',
]
MIDDLEWARE = (
        [
            'django_prometheus.middleware.PrometheusBeforeMiddleware',
        ] + MIDDLEWARE + [
            'django_prometheus.middleware.PrometheusAfterMiddleware',
        ]
)
# ================================================================
# Our own functional apps
# ================================================================

INSTALLED_APPS += [
    'myapp',
    'accounts',
    'api',
    'web_homepage',
]

# ================================================================
# Mail
# ================================================================

# TODO
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
