# for updates and superuser setup, please use:
# docker-compose run python migrate
# docker-compose run

version: "3.4"
services:


  opal-server:
    entrypoint: [ "echo", "Service disabled" ]
    image: authorizon/opal-server:0.1.11
    ports: []
    #  - 7002
    environment:
      # Only 1 to avoid requiring a broadcast server (currently: pgsql, redis, kafka)
      # UVICORN_NUM_WORKERS: 1
      OPAL_POLICY_REPO_URL: "git@github.com:phi1010/zam-door-opa-policy.git"
      # The passed value must be the contents of the SSH key in one line (replace new-line with underscore, i.e: \n with _)
      # OPAL_POLICY_REPO_CLONE_PATH:
      OPAL_POLICY_REPO_MAIN_BRANCH: main
      # OPAL_POLICY_REPO_MAIN_REMOTE: origin
      OPAL_POLICY_REPO_POLLING_INTERVAL: 10
      # OPAL_DATA_CONFIG_SOURCES:
      #   # language=json
      #   '{
      #       "config": {
      #         "entries": [
      #           {
      #             "url": "https://api.authorizon.com/v1/policy-config",
      #             "topics": [
      #               "policy_data"
      #             ],
      #             "config": {
      #               "headers": {
      #                 "Authorization": "Bearer FAKE-SECRET"
      #               }
      #             }
      #           }
      #         ]
      #       }
      #     }'
      OPAL_AUTH_PRIVATE_KEY:
      OPAL_AUTH_PUBLIC_KEY:
      OPAL_POLICY_REPO_SSH_KEY: "${OPAL_GIT_PRIVATE_KEY}"
      OPAL_AUTH_MASTER_TOKEN:
      # there are no https certificates, thus the security against attacks from other containers is weak.
    volumes:
      - "./opa/policy:/mnt/policy/:ro"
    networks:
      - opal


  opa-sidecar:
    entrypoint: [ "echo", "Service disabled" ]
    depends_on:
      - opal-server
    image: authorizon/opal-client:0.1.11
    ports: []
      # - "127.0.0.1:7000:7000" # OPAL client healthcheck # TODO VULN disable
      # here one can query http://localhost:8181/v1/data/app/door_commander/physical_access/allow
      # WARNING: EVERYONE WHO CAN ACCESS THIS PORT CAN CHANGE ACCESS POLICIES AND DATA
      # - "127.0.0.1:8181:8181" # OPA # TODO VULN disable
    environment:
      OPAL_CLIENT_TOKEN: "${OPAL_AUTH_CLIENT_TOKEN}"
      OPAL_SERVER_URL: http://opal-server:7002
    networks:
      - opal
      - opa


  mqtt:
    image: eclipse-mosquitto
    volumes:
      - door-commander-mosquitto-log:/mosquitto/log
      - door-commander-mosquitto-data:/mosquitto/data
      - ./mosquitto/config/mosquitto.conf:/mosquitto/config/mosquitto.conf:ro
      - ./mosquitto/config/mosquitto.acl:/mosquitto/config/mosquitto.acl:ro
      - ./mosquitto/config/mosquitto.passwd:/mosquitto/config/mosquitto.passwd
    networks:
      - web
      - mqtt
      - inventory_management
    ports:
      - "127.0.0.1:8082:80" # with nginx SSL reverse proxy
    restart: unless-stopped

  db:
    #image: postgres
    build:
      context: ./postgres
      dockerfile: postgres.dockerfile
      args:
        POSTGRES_VERSION: 13
        #POSTGRES_VERSION: latest
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD
      - POSTGRES_DB=db
    restart: unless-stopped
    volumes:
      - door-commander-postgres:/var/lib/postgresql/data
    #ports:
    #  - "127.0.0.1:5432:5432"
    networks:
      - db


  python:
    depends_on:
      - db
      - redis
    environment:
      &python-environment
      OIDC_RP_CLIENT_ID:
      OIDC_RP_CLIENT_SECRET:
      OIDC_OP_LOGOUT_URL:
      OIDC_OP_USER_ENDPOINT:
      OIDC_OP_AUTHORIZATION_ENDPOINT:
      OIDC_OP_TOKEN_ENDPOINT:
      POSTGRES_PASSWORD: '${POSTGRES_PASSWORD_DJANGO}'
      POSTGRES_USER: '${POSTGRES_USER_DJANGO}'
      POSTGRES_DB: '${POSTGRES_DB_DJANGO}'
      MQTT_PASSWD_CONTROLLER:
      MQTT_CONNECTION: '{"host":"mqtt", "port":1883, "keepalive":10}'
      DJANGO_LOGGING:
        # language=json
        '
        {
          "version": 1,
          "disable_existing_loggers": false,
          "formatters": { "verbose": { "format": "%(levelname)s %(asctime)s %(name)s %(process)d %(thread)d %(message)s" } },
          "handlers": {
            "console": {
              "class": "logging.StreamHandler",
              "formatter": "verbose"
            }
          },
          "root": {
            "handlers": [
              "console"
            ],
            "level": "INFO"
          },
          "loggers": {
            "django": {
              "handlers": [
                "console"
              ],
              "level": "WARN",
              "propagate": false
            },
            "web_homepage.views": {"level":"WARN"},
            "ipware.ip": {"level":"ERROR"}
          }
        }
        '
    build:
      &python-build
      context: ""
      dockerfile: Dockerfile
      target: python-web
      args:
        PYTHON_VERSION: 3.8
    #image: python_image
    volumes:
      - "door-commander-python-data:/opt/door-commander.betreiberverein.de/data"
    networks:
      - opa
      - db
      - web
      - mqtt
    ports: []
      # - "127.0.0.1:8000:8000"
    restart: unless-stopped

  celery-beat:
    build: *python-build
    #image: python_image
    command: celery -A door_commander beat -l info -s /opt/door-commander.betreiberverein.de/data/celerybeat-schedule
    volumes:
      - "celery-beat-schedule:/opt/door-commander.betreiberverein.de/data"
    environment: *python-environment
    depends_on:
      - redis
      - db
    networks:
      - db

  nginx:
    build:
      context: ""
      dockerfile: Dockerfile
      target: nginx
      args:
        PYTHON_VERSION: 3.8
        NGINX_VERSION: 1-alpine
    ports:
      - "127.0.0.1:80:80"
    depends_on:
      - python
    networks:
      - web
    restart: unless-stopped

  redis:
    # this redis has no authentication.
    # NEVER EXPOSE ITS PORTS
    image: redis:alpine
    networks:
      - db


  celery:
    command: celery -A door_commander worker -l info
    build: *python-build
    #image: python_image
    volumes: []
    environment: *python-environment
    depends_on:
      - redis
      - db
    networks:
      - db
      - mqtt


networks:
  opa: # OPA / OPAL-Client <--> django
  opal: # OPAL Server <--> OPAL Client
  mqtt: # mosquitto <--> django
  db: # psql <--> django
  web: # nginx <--> django
    external:
      name: nginx_door_commander_external
  inventory_management:
    external:
      name: nginx_inventory_management_external

volumes:
  door-commander-python-data:
  door-commander-postgres:
  door-commander-mosquitto-data:
  door-commander-mosquitto-log:
  celery-beat-schedule:
