# for updates and superuser setup, please use:
# docker-compose run python migrate
# docker-compose run

version: "3.4"
services:


  db:
    #image: postgres
    build:
      context: ./postgres
      dockerfile: postgres.dockerfile
      args:
        POSTGRES_VERSION: 14
        #POSTGRES_VERSION: latest
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD
      - POSTGRES_DB=db
    restart: unless-stopped
    volumes:
      - door-commander-postgres:/var/lib/postgresql/data
    #ports:
    #  - "127.0.0.1:5432:5432"
    networks:
      - db


  python:
    depends_on:
      - db
      - redis
    environment:
      &python-environment
      OPA_BEARER_TOKEN: '${OPA_BEARER_TOKEN}'
      OPA_URL: "http://opa:8181/"
      OPA_BUNDLE_DIRECTORY: "/data/opa-bundle"
      ALLOWED_HOSTS:
      LDAP_BASE_DN:
      LDAP_BIND_DN:
      LDAP_PASSWORD:
      LDAP_URL:
      OIDC_OP_JWKS_ENDPOINT:
      OIDC_RP_CLIENT_ID:
      OIDC_RP_SIGN_ALGO:
      OIDC_RP_CLIENT_SECRET:
      OIDC_OP_LOGOUT_URL:
      OIDC_OP_USER_ENDPOINT:
      OIDC_OP_AUTHORIZATION_ENDPOINT:
      OIDC_OP_TOKEN_ENDPOINT:
      DJANGO_SECRET:
      DJANGO_SALT:
      POSTGRES_PASSWORD: '${POSTGRES_PASSWORD_DJANGO}'
      POSTGRES_USER: '${POSTGRES_USER_DJANGO}'
      POSTGRES_DB: '${POSTGRES_DB_DJANGO}'
      POSTGRES_HOST: "db"
      DJANGO_LOGGING:
        # language=json
        '
        {
          "version": 1,
          "disable_existing_loggers": false,
          "formatters": { "verbose": { "format": "%(levelname)s %(asctime)s %(name)s %(process)d %(thread)d %(message)s" } },
          "handlers": {
            "console": {
              "class": "logging.StreamHandler",
              "formatter": "verbose"
            }
          },
          "root": {
            "handlers": [
              "console"
            ],
            "level": "INFO"
          },
          "loggers": {
            "django": {
              "handlers": [
                "console"
              ],
              "level": "WARN",
              "propagate": false
            },
            "web_homepage.views": {"level":"WARN"},
            "ipware.ip": {"level":"ERROR"}
          }
        }
        '
    build:
      &python-build
      context: "."
      dockerfile: Dockerfile
      target: python-web
      args:
        PYTHON_VERSION: "3.13"
    #image: python_image
    volumes:
      - "./opa/policy:/data/opa-bundle:ro"
    networks:
      - db
      - opa
      - web
    ports: []
      # - "127.0.0.1:8000:8000"
    restart: unless-stopped

  celery-beat:
    build: *python-build
    #image: python_image
    command: celery -A door_commander beat -l info -s /opt/door-commander.betreiberverein.de/data/celerybeat-schedule
    volumes:
      - "celery-beat-schedule:/opt/door-commander.betreiberverein.de/data"
    environment: *python-environment
    depends_on:
      - redis
      - db
    networks:
      - db
      - opa
  # This is necessary since volumes are only writable as root by default, but opa runs as 1000:1000.
  opa-change-volume-uid:
    image: ubuntu
    command: "bash -c 'set -eux ; chown -R 1000:1000 /var/opa'"
    volumes:
      - opa-persistence:/var/opa/
  opa:
    command: run --server --addr :8181 --authentication=token --authorization=basic -c /data/config.yaml
    environment:
      OPA_BEARER_TOKEN: '${OPA_BEARER_TOKEN}'
      OPA_BUNDLE_SERVER_URL: "http://python:8000/opa-bundles/"
    image: "openpolicyagent/opa:latest"
    networks:
      - opa
    ports: []
      #- "127.0.0.1:8181:8181"
    volumes:
      - ./opa/:/data/:ro
      - opa-persistence:/var/opa/
    depends_on:
      - opa-change-volume-uid

  nginx:
    build:
      context: "."
      dockerfile: Dockerfile
      target: nginx
      args:
        PYTHON_VERSION: "3.13"
        NGINX_VERSION: 1-alpine
    depends_on:
      - python
    networks:
      - web
    restart: unless-stopped

  redis:
    # this redis has no authentication.
    # NEVER EXPOSE ITS PORTS
    image: redis:alpine
    networks:
      - db


  celery:
    command: celery -A door_commander worker -l info
    build: *python-build
    #image: python_image
    volumes: []
    environment: *python-environment
    depends_on:
      - redis
      - db
    networks:
      - db


networks:
  db: # psql <--> django
  web: # nginx <--> django
    #external:
    #  name: nginx_door_commander_external
  inventory_management:
    #external:
    #  name: nginx_inventory_management_external
  opa: #

volumes:
  door-commander-postgres:
  celery-beat-schedule:
  opa-persistence: